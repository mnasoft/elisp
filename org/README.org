#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:t todo:t |:t
#+title: README
#+date: <2023-08-28 Пн>
#+author:
#+email: mnasoft@gmail.com
#+language: ru
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 28.2 (Org mode 9.5.5)
#+cite_export:
#+options: html-link-use-abs-url:nil html-postamble:auto
#+options: html-preamble:t html-scripts:nil html-style:t
#+options: html5-fancy:nil tex:t
#+html_doctype: xhtml-strict
#+html_container: div
#+html_content_class: content
#+description:
#+keywords:
#+html_link_home:
#+html_link_up:
#+html_mathjax:
#+html_equation_reference_format: \eqref{%s}
#+html_head:
#+html_head_extra:
#+subtitle:
#+infojs_opt:
#+creator: <a href="https://www.gnu.org/software/emacs/">Emacs</a> 28.2 (<a href="https://orgmode.org">Org</a> mode 9.5.5)
#+latex_header:

* Содержание
** Настройка =.bash_profile=
#+begin_src sh
  UNAME_N="N142013"

  if [[ "N133905" == ${UNAME_N} ]]
  then
      SBCL_HOME="//n133905/home/_namatv/PRG//SBCL/2.2.1-msi"
      PATH="${PATH}:${SBCL_HOME}"
  elif [[ "N142013" == ${UNAME_N} ]]
  then
      SBCL_HOME="D:/home/_namatv/PRG/SBCL/2.3.2-msi"
      PATH="${PATH}:/d/home/_namatv/PRG/SBCL/2.3.2-msi"
  fi

  export SBCL_HOME
  export PATH

  echo .bash_profile SBCL_HOME=${SBCL_HOME}
#+end_src
** Перечень рекомендуемых к использованию пакетов
| Наименование пакета            | Status     | Archive | Описание                                           |
|--------------------------------+------------+---------+----------------------------------------------------|
| sly                            | installed  |         | Sylvester the Cat's Common Lisp IDE                |
| neotree                        | installed  |         | A tree plugin like NerdTree for Vim                |
| htmlize                        | installed  |         | Convert buffer text and decorations to HTML.       |
| company                        | dependency |         | Modular text completion framework                  |
| gnuplot                        | dependency |         | Major-mode and interactive frontend for gnuplot    |
|--------------------------------+------------+---------+----------------------------------------------------|
| cdlatex                        | available  | melpa   | Fast input methods for LaTeX environments and math |
| auctex                         | available  | gnu     | Integrated environment for *TeX*                   |
| deadgrep                       | available  | melpa   | fast, friendly searching with ripgrep              |
| color-theme-sanityinc-tomorrow | available  | melpa   | A version of Chris Kempson's "tomorrow" themes     |
| ox-twbs                        | available  | melpa   | Bootstrap compatible HTML Back-End for Org         |

** Перечень файлов проекта
#+BEGIN_SRC sh :exports both 
  cd ~/elisp;
  for i in `ls *.el`
  do
      echo [[~/elisp/${i}]]
  done
#+END_SRC

#+RESULTS:
| [[file:~/elisp/annotation.el]]                  |
| [[file:~/elisp/common-lisp.el]]                 |
| [[file:~/elisp/directory.el]]                   |
| [[file:~/elisp/gnuplot.el]]                     |
| [[file:~/elisp/hide-show-mode.el]]              |
| [[file:~/elisp/hunspell.el]]                    |
| [[file:~/elisp/inferior-lisp-program.el]]       |
| [[file:~/elisp/kill-some-buffers.el]]           |
| [[file:~/elisp/main.el]]                        |
| [[file:~/elisp/mik-tex.el]]                     |
| [[file:~/elisp/mnas-publish.el]]                |
| [[file:~/elisp/neotree.el]]                     |
| [[file:~/elisp/open-some-files.el]]             |
| [[file:~/elisp/org-babel-do-load-languages.el]] |
| [[file:~/elisp/org-code.el]]                    |
| [[file:~/elisp/org-structure.el]]               |
| [[file:~/elisp/scriba.el]]                      |
| [[file:~/elisp/slime-start.el]]                 |
| [[file:~/elisp/sly-start.el]]                   |
| [[file:~/elisp/tcl-helper.el]]                  |
| [[file:~/elisp/translate-commands-gr-ru-uk.el]] |
| [[file:~/elisp/yes-or-no-p.el]]                 |
| [[file:~/elisp/zm-tz-header.el]]                |

** Файл init.el

#+begin_src sh
  cat ../../.emacs.d/init.el
#+end_src


#+begin_src elisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  ;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
  ;; and `package-pinned-packages`. Most users will not need or want to do this.
  ;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (package-initialize)
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(custom-enabled-themes '(modus-operandi))
   '(package-selected-packages
     '(htmlize afterglow 0blayout sly-quicklisp company neotree sly)))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(default ((t (:family "Consolas" :foundry "outline" :slant normal :weight regular :height 128 :width normal)))))
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (load "~/elisp/main.el")
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
#+end_src
